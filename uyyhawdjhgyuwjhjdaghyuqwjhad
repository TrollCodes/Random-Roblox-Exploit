--[[
 .____                  ________ ___.    _____                           __                
 |    |    __ _______   \_____  \\_ |___/ ____\_ __  ______ ____ _____ _/  |_  ___________ 
 |    |   |  |  \__  \   /   |   \| __ \   __\  |  \/  ___// ___\\__  \\   __\/  _ \_  __ \
 |    |___|  |  // __ \_/    |    \ \_\ \  | |  |  /\___ \\  \___ / __ \|  | (  <_> )  | \/
 |_______ \____/(____  /\_______  /___  /__| |____//____  >\___  >____  /__|  \____/|__|   
         \/          \/         \/    \/                \/     \/     \/                   
          \_Welcome to LuaObfuscator.com   (Alpha 0.2.6) ~  Much Love, Ferib 

]]--

do
	local v0 = tonumber;
	local v1 = string.byte;
	local v2 = string.char;
	local v3 = string.sub;
	local v4 = string.gsub;
	local v5 = string.rep;
	local v6 = table.concat;
	local v7 = table.insert;
	local v8 = math.ldexp;
	local v9 = getfenv or function()
		return _ENV;
	end;
	local v10 = setmetatable;
	local v11 = pcall;
	local v12 = select;
	local v13 = unpack or table.unpack;
	local v14 = tonumber;
	local function v15(v16, v17, ...)
		local v18 = 1;
		local v19;
		v16 = v4(v3(v16, 5), "..", function(v30)
			if (v1(v30, 2) == 79) then
				local v69 = 0;
				while true do
					if (v69 == 0) then
						v19 = v0(v3(v30, 1, 1));
						return "";
					end
				end
			else
				local v70 = 0;
				local v71;
				while true do
					if (v70 == 0) then
						v71 = v2(v0(v30, 16));
						if v19 then
							local v100 = 0;
							local v101;
							while true do
								if (v100 == 1) then
									return v101;
								end
								if (v100 == 0) then
									v101 = v5(v71, v19);
									v19 = nil;
									v100 = 1;
								end
							end
						else
							return v71;
						end
						break;
					end
				end
			end
		end);
		local function v20(v31, v32, v33)
			if v33 then
				local v72 = (v31 / ((5 - 3) ^ (v32 - (2 - 1)))) % ((3 - 1) ^ (((v33 - (2 - 1)) - (v32 - (620 - (555 + (941 - (282 + 595)))))) + (932 - (857 + 74))));
				return v72 - (v72 % ((2206 - (1523 + 114)) - (367 + 201)));
			else
				local v73 = 0;
				local v74;
				while true do
					if (v73 == (0 + 0)) then
						v74 = (929 - (214 + 713)) ^ (v32 - (1 + 0));
						return (((v31 % (v74 + v74)) >= v74) and (1 + 0)) or 0;
					end
				end
			end
		end
		local function v21()
			local v34 = 0 - 0;
			local v35;
			while true do
				if (v34 == (1065 - (68 + 997))) then
					v35 = v1(v16, v18, v18);
					v18 = v18 + 1;
					v34 = (1388 - (32 + 85)) - (226 + 1044);
				end
				if (v34 == (4 - 3)) then
					return v35;
				end
			end
		end
		local function v22()
			local v36 = 0;
			local v37;
			local v38;
			while true do
				if (v36 == (0 + 0)) then
					v37, v38 = v1(v16, v18, v18 + 1 + 1);
					v18 = v18 + 2;
					v36 = 958 - (892 + 65);
				end
				if (v36 == ((3 - 1) - (351 - (87 + 263)))) then
					return (v38 * (472 - 216)) + v37;
				end
			end
		end
		local function v23()
			local v39, v40, v41, v42 = v1(v16, v18, v18 + (183 - (67 + 113)));
			v18 = v18 + 3 + 1;
			return (v42 * 16777216) + (v41 * (160901 - 95365)) + (v40 * 256) + v39;
		end
		local function v24()
			local v43 = v23();
			local v44 = v23();
			local v45 = 1;
			local v46 = (v20(v44, 1 + 0, (97 - (10 + 8)) - 59) * ((954 - (802 + 150)) ^ (85 - (203 - 150)))) + v43;
			local v47 = v20(v44, 21, 55 - 24);
			local v48 = ((v20(v44, 24 + 8) == (998 - (915 + 82))) and -(2 - 1)) or (1 + 0);
			if (v47 == (442 - (416 + 26))) then
				if (v46 == (0 - (0 - 0))) then
					return v48 * (1187 - (1069 + 118));
				else
					v47 = 1;
					v45 = 0 - 0;
				end
			elseif (v47 == 2047) then
				return ((v46 == (0 - 0)) and (v48 * ((1 + 0) / (0 - 0)))) or (v48 * NaN);
			end
			return v8(v48, v47 - (1015 + 8)) * (v45 + (v46 / ((793 - (368 + 423)) ^ (163 - 111))));
		end
		local function v25(v49)
			local v50;
			if not v49 then
				v49 = v23();
				if (v49 == (0 + 0)) then
					return "";
				end
			end
			v50 = v3(v16, v18, (v18 + v49) - (1 - 0));
			v18 = v18 + v49;
			local v51 = {};
			for v67 = 439 - (145 + 293), #v50 do
				v51[v67] = v2(v1(v3(v50, v67, v67)));
			end
			return v6(v51);
		end
		local v26 = v23;
		local function v27(...)
			return {...}, v12("#", ...);
		end
		local function v28()
			local v52 = 850 - (20 + 830);
			local v53;
			local v54;
			local v55;
			local v56;
			local v57;
			local v58;
			local v59;
			while true do
				if (v52 ~= 3) then
				else
					v59 = nil;
					while true do
						local v78 = 0 + 0;
						local v79;
						while true do
							if (0 ~= v78) then
							else
								v79 = 0 + 0;
								while true do
									if ((126 - (116 + 10)) == v79) then
										local v106 = 0 - 0;
										while true do
											if (v106 == (739 - (542 + 196))) then
												v79 = 2 - 1;
												break;
											end
											if (v106 == (1700 - (1419 + 281))) then
												if (v53 == 2) then
													for v114 = 1 - 0, v58 do
														local v115 = 74 - (71 + 3);
														local v116;
														local v117;
														local v118;
														while true do
															if (v115 == (0 + 0)) then
																v116 = 0 + 0;
																v117 = nil;
																v115 = 2 - 1;
															end
															if (v115 == (1 + 0)) then
																v118 = nil;
																while true do
																	if (v116 ~= (0 - 0)) then
																	else
																		v117 = v21();
																		v118 = nil;
																		v116 = 242 - (187 + 54);
																	end
																	if (v116 ~= (2 - 1)) then
																	else
																		if (v117 == (781 - (162 + 618))) then
																			v118 = v21() ~= (0 + 0);
																		elseif (v117 == 2) then
																			v118 = v24();
																		elseif (v117 ~= (2 + 1)) then
																		else
																			v118 = v25();
																		end
																		v59[v114] = v118;
																		break;
																	end
																end
																break;
															end
														end
													end
													v57[6 - 3] = v21();
													for v119 = 3 - 2, v23() do
														local v120 = 0;
														local v121;
														local v122;
														while true do
															if (v120 ~= (0 - 0)) then
															else
																v121 = 0 + 0;
																v122 = nil;
																v120 = 1637 - (1373 + 263);
															end
															if (v120 ~= 1) then
															else
																while true do
																	if (v121 ~= (1000 - (451 + 549))) then
																	else
																		v122 = v21();
																		if (v20(v122, 1 + 0, 1 - 0) == (0 - 0)) then
																			local v204 = 1384 - (746 + 638);
																			local v205;
																			local v206;
																			local v207;
																			local v208;
																			local v209;
																			local v210;
																			while true do
																				if (v204 == (1 + 1)) then
																					v209 = nil;
																					v210 = nil;
																					v204 = 4 - 1;
																				end
																				if (v204 == (5 - 2)) then
																					while true do
																						if (v205 ~= (0 + 0)) then
																						else
																							local v274 = 341 - (218 + 123);
																							while true do
																								if (v274 ~= (1582 - (1535 + 46))) then
																								else
																									v205 = 1 + 0;
																									break;
																								end
																								if (v274 == 0) then
																									v206 = 0 + 0;
																									v207 = nil;
																									v274 = 1 + 0;
																								end
																							end
																						end
																						if (v205 ~= (4 - 2)) then
																						else
																							v210 = nil;
																							while true do
																								if (v206 ~= (0 - 0)) then
																								else
																									local v301 = 0 - 0;
																									while true do
																										if (v301 == (1 + 0)) then
																											v206 = 4 - 3;
																											break;
																										end
																										if (v301 == (753 - (239 + 514))) then
																											v207 = 0;
																											v208 = nil;
																											v301 = 1;
																										end
																									end
																								end
																								if ((1 + 0) == v206) then
																									local v302 = 560 - (306 + 254);
																									local v303;
																									while true do
																										if (v302 == (0 + 0)) then
																											v303 = 0 + 0;
																											while true do
																												if (v303 ~= (1 - 0)) then
																												else
																													v206 = 4 - 2;
																													break;
																												end
																												if (v303 ~= (1467 - (899 + 568))) then
																												else
																													local v333 = 0 + 0;
																													while true do
																														if (0 == v333) then
																															v209 = nil;
																															v210 = nil;
																															v333 = 2 - 1;
																														end
																														if (v333 == (604 - (268 + 335))) then
																															v303 = 291 - (60 + 230);
																															break;
																														end
																													end
																												end
																											end
																											break;
																										end
																									end
																								end
																								if (v206 == (574 - (426 + 146))) then
																									while true do
																										if (v207 ~= (1 + 0)) then
																										else
																											local v317 = 0 - 0;
																											while true do
																												if (v317 ~= (1457 - (282 + 1174))) then
																												else
																													v207 = 2;
																													break;
																												end
																												if (v317 ~= 0) then
																												else
																													v210 = {v22(),v22(),nil,nil};
																													if (v208 == (0 - 0)) then
																														local v338 = 0;
																														local v339;
																														while true do
																															if (v338 == 0) then
																																v339 = 0;
																																while true do
																																	if (v339 ~= (238 - (64 + 174))) then
																																	else
																																		v210[1 + 2] = v22();
																																		v210[4] = v22();
																																		break;
																																	end
																																end
																																break;
																															end
																														end
																													elseif (v208 == 1) then
																														v210[1027 - (706 + 318)] = v23();
																													elseif (v208 == (1253 - (721 + 530))) then
																														v210[3] = v23() - ((1273 - (945 + 326)) ^ 16);
																													elseif (v208 ~= 3) then
																													else
																														local v363 = 0;
																														local v364;
																														local v365;
																														while true do
																															if (v363 ~= (337 - (144 + 192))) then
																															else
																																while true do
																																	if (v364 ~= (0 - 0)) then
																																	else
																																		v365 = 0 + 0;
																																		while true do
																																			if (v365 ~= (700 - (271 + 429))) then
																																			else
																																				v210[3] = v23() - (2 ^ (15 + 1));
																																				v210[1504 - (1408 + 92)] = v22();
																																				break;
																																			end
																																		end
																																		break;
																																	end
																																end
																																break;
																															end
																															if (v363 == (216 - (42 + 174))) then
																																v364 = 0 + 0;
																																v365 = nil;
																																v363 = 1 + 0;
																															end
																														end
																													end
																													v317 = 1 + 0;
																												end
																											end
																										end
																										if (v207 ~= (1089 - (461 + 625))) then
																										else
																											if (v20(v209, 3, 1291 - (993 + 295)) == (1 + 0)) then
																												v210[1175 - (418 + 753)] = v59[v210[2 + 2]];
																											end
																											v54[v119] = v210;
																											break;
																										end
																										if ((0 - 0) ~= v207) then
																										else
																											local v319 = 0 + 0;
																											while true do
																												if (v319 == (0 + 0)) then
																													local v334 = 0 + 0;
																													while true do
																														if (v334 ~= (1 + 0)) then
																														else
																															v319 = 1 + 0;
																															break;
																														end
																														if (v334 ~= (529 - (406 + 123))) then
																														else
																															v208 = v20(v122, 1771 - (1749 + 20), 1 + 2);
																															v209 = v20(v122, 3 + 1, 1328 - (1249 + 73));
																															v334 = 1 + 0;
																														end
																													end
																												end
																												if (v319 ~= 1) then
																												else
																													v207 = 2 - 1;
																													break;
																												end
																											end
																										end
																										if (v207 == 2) then
																											local v320 = 0;
																											while true do
																												if (v320 == (1145 - (466 + 679))) then
																													local v335 = 0 - 0;
																													while true do
																														if (v335 ~= (2 - 1)) then
																														else
																															v320 = 1;
																															break;
																														end
																														if (v335 == (1900 - (106 + 1794))) then
																															if (v20(v209, 1 + 0, 1 + 0) ~= (2 - 1)) then
																															else
																																v210[5 - 3] = v59[v210[2]];
																															end
																															if (v20(v209, 2, 2) == 1) then
																																v210[4 - 1] = v59[v210[117 - (4 + 110)]];
																															end
																															v335 = 2 - 1;
																														end
																													end
																												end
																												if ((305 - (244 + 60)) ~= v320) then
																												else
																													v207 = 3;
																													break;
																												end
																											end
																										end
																									end
																									break;
																								end
																							end
																							break;
																						end
																						if (v205 ~= (585 - (57 + 527))) then
																						else
																							local v275 = 1427 - (41 + 1386);
																							while true do
																								if (0 == v275) then
																									v208 = nil;
																									v209 = nil;
																									v275 = 1 + 0;
																								end
																								if (v275 == (477 - (41 + 435))) then
																									v205 = 1003 - (938 + 63);
																									break;
																								end
																							end
																						end
																					end
																					break;
																				end
																				if ((1 + 0) ~= v204) then
																				else
																					v207 = nil;
																					v208 = nil;
																					v204 = 2;
																				end
																				if (v204 == (1125 - (936 + 189))) then
																					v205 = 103 - (17 + 86);
																					v206 = nil;
																					v204 = 1614 - (1565 + 48);
																				end
																			end
																		end
																		break;
																	end
																end
																break;
															end
														end
													end
													v53 = 3;
												end
												if (v53 ~= (3 + 0)) then
												else
													for v123 = 1139 - (782 + 356), v23() do
														v55[v123 - (1 - 0)] = v28();
													end
													for v125 = 2 - 1, v23() do
														v56[v125] = v23();
													end
													return v57;
												end
												v106 = 1;
											end
										end
									end
									if (v79 ~= (167 - (122 + 44))) then
									else
										if (v53 ~= (1 - 0)) then
										else
											local v107 = 0;
											local v108;
											while true do
												if (v107 == (0 - 0)) then
													v108 = 0 + 0;
													while true do
														if (v108 ~= (0 + 0)) then
														else
															local v127 = 0;
															while true do
																if (v127 == (1 + 0)) then
																	v108 = 1;
																	break;
																end
																if (0 == v127) then
																	v57 = {v54,v55,nil,v56};
																	v58 = v23();
																	v127 = 1;
																end
															end
														end
														if ((3 - 2) == v108) then
															v59 = {};
															v53 = 1214 - (323 + 889);
															break;
														end
													end
													break;
												end
											end
										end
										if (v53 == (0 - 0)) then
											local v109 = 0 - 0;
											local v110;
											while true do
												if (v109 == 0) then
													v110 = 0 - 0;
													while true do
														if (v110 ~= (581 - (361 + 219))) then
														else
															v56 = {};
															v53 = 1 + 0;
															break;
														end
														if (v110 ~= (320 - (53 + 267))) then
														else
															local v128 = 0;
															while true do
																if ((1 + 0) ~= v128) then
																else
																	v110 = 2 - 1;
																	break;
																end
																if (v128 == (1227 - (322 + 905))) then
																	v54 = {};
																	v55 = {};
																	v128 = 414 - (15 + 398);
																end
															end
														end
													end
													break;
												end
											end
										end
										break;
									end
								end
								break;
							end
						end
					end
					break;
				end
				if (v52 ~= (982 - (18 + 964))) then
				else
					v53 = 0;
					v54 = nil;
					v52 = 3 - 2;
				end
				if (v52 == 2) then
					v57 = nil;
					v58 = nil;
					v52 = 2 + 1;
				end
				if (v52 == 1) then
					v55 = nil;
					v56 = nil;
					v52 = 2 + 0;
				end
			end
		end
		local function v29(v60, v61, v62)
			local v63 = 0;
			local v64;
			local v65;
			local v66;
			while true do
				if (1 == v63) then
					v66 = v60[3];
					return function(...)
						local v80 = 1;
						local v81 = -1;
						local v82 = {...};
						local v83 = v12("#", ...) - 1;
						local function v84()
							local v85 = v64;
							local v86 = v65;
							local v87 = v66;
							local v88 = v27;
							local v89 = {};
							local v90 = {};
							local v91 = {};
							for v95 = 872 - (167 + 659 + (125 - 79)), v83 do
								if ((4492 >= (3601 - (245 + 702))) and (v95 >= v87)) then
									v89[v95 - v87] = v82[v95 + (3 - 2)];
								else
									v91[v95] = v82[v95 + 1 + 0];
								end
							end
							local v92 = (v83 - v87) + (1899 - ((550 - (23 + 267)) + 1638));
							local v93;
							local v94;
							while true do
								local v96 = 440 - (382 + 58);
								local v97;
								while true do
									if (((11041 - 7599) >= (1249 + 254)) and (v96 == 0)) then
										v97 = 0 - 0;
										while true do
											if ((v97 == (0 - (1944 - (1129 + 815)))) or (3170 <= (2669 - (902 + (690 - (371 + 16)))))) then
												local v111 = 0;
												while true do
													if (((1 - 0) == v111) or ((11553 - (8506 - (1326 + 424))) == (378 + 4010))) then
														v97 = 1691 - (1121 + 569);
														break;
													end
													if ((551 <= (895 - (22 + 192))) and (v111 == 0)) then
														local v113 = 0;
														while true do
															if ((3277 > (770 - 363)) and ((683 - ((1764 - 1281) + 200)) == v113)) then
																v93 = v85[v80];
																v94 = v93[1464 - (1404 + 59)];
																v113 = 1;
															end
															if (((12848 - 8153) >= 1415) and (v113 == (1 - 0))) then
																v111 = 1;
																break;
															end
														end
													end
												end
											end
											if ((v97 == (766 - (468 + 297))) or ((3774 - (334 + 228)) <= (3183 - 2239))) then
												if ((v94 <= (38 - 21)) or ((5614 - 2518) <= 1798)) then
													if ((((1123 - (88 + 30)) + 2532) == (3773 - (141 + 95))) and (v94 <= (8 + 0))) then
														if (((9876 - (6810 - (720 + 51))) >= (3774 - 2204)) and (v94 <= (1 + 2))) then
															if ((v94 <= (2 - 1)) or (2950 == (2680 + (2517 - 1385)))) then
																if ((((4236 - (421 + 1355)) + 2263) >= (3264 - 946)) and (v94 == (0 + 0))) then
																	v91[v93[165 - (92 + 71)]] = v93[3] ~= (0 + 0);
																else
																	local v133 = (0 - 0) - 0;
																	local v134;
																	local v135;
																	while true do
																		if ((v133 == (765 - (574 + 191))) or ((1672 + 175 + 180) > 2852)) then
																			v134 = 0 - 0;
																			v135 = nil;
																			v133 = 1 + 0;
																		end
																		if ((v133 == (850 - (254 + 595))) or ((1262 - (55 + 71)) > (5687 - 1370))) then
																			while true do
																				if ((4748 == ((7621 - (286 + 797)) - ((2094 - 1521) + 1217))) and (v134 == ((0 - 0) - 0))) then
																					v135 = v93[1 + 1];
																					v91[v135](v91[v135 + ((440 - (397 + 42)) - 0)]);
																					break;
																				end
																			end
																			break;
																		end
																	end
																end
															elseif (((4675 - (714 + 225)) <= 4740) and (v94 > 2)) then
																v62[v93[8 - 5]] = v91[v93[2 - 0]];
															else
																v91[v93[1 + 1 + 0]] = v91[v93[3]];
															end
														elseif ((v94 <= (6 - 1)) or (((4996 - (24 + 776)) - ((181 - 63) + 688)) <= (3108 - (25 + (808 - (222 + 563)))))) then
															if ((v94 > (1 + 3)) or ((2885 - (927 + 959)) > (9077 - 6384))) then
																v91[v93[734 - (16 + (1577 - 861))]] = v62[v93[3]];
															else
																local v142 = 0;
																local v143;
																while true do
																	if (((893 - 430) < ((503 + 195) - ((201 - (23 + 167)) + 86))) and (v142 == (0 - 0))) then
																		v143 = v93[(2085 - (690 + 1108)) - (175 + 110)];
																		do
																			return v13(v91, v143, v81);
																		end
																		break;
																	end
																end
															end
														elseif ((v94 <= (14 - (3 + 5))) or ((10767 - 8584) < (2483 - (503 + 1293)))) then
															local v144 = 0 - 0;
															local v145;
															local v146;
															local v147;
															local v148;
															while true do
																if (((3290 + 1039 + 220) == (5397 - (40 + 808))) and (1 == v144)) then
																	v147 = nil;
																	v148 = nil;
																	v144 = 2;
																end
																if ((4672 == (5733 - (134 + 676 + 251))) and (v144 == (0 + 0))) then
																	v145 = 0;
																	v146 = nil;
																	v144 = (3 - 2) + 0;
																end
																if ((2 == v144) or (3668 < 395)) then
																	while true do
																		if ((v145 == (0 + 0)) or ((4699 - (42 + 1 + 490)) == (1188 - (711 + 22)))) then
																			v146 = (0 + 0) - 0;
																			v147 = nil;
																			v145 = 1;
																		end
																		if ((v145 == (860 - (240 + 619))) or ((1074 + 3375) == 2663)) then
																			v148 = nil;
																			while true do
																				if ((v146 == (0 - 0)) or ((284 + 3993) < (4733 - (1344 + 400)))) then
																					local v276 = 405 - (140 + 115 + 150);
																					local v277;
																					while true do
																						if ((v276 == (0 + (571 - (47 + 524)))) or ((303 + 163 + 404) >= (11341 - 7192))) then
																							v277 = 0 - 0;
																							while true do
																								if ((2212 < (10280 - 7097)) and (v277 == (1739 - (404 + (1996 - 661))))) then
																									v147 = v93[4 - 2];
																									v148 = v91[v147];
																									v277 = 1;
																								end
																								if (((5052 - (183 + 223)) > 2992) and (v277 == (1 - 0))) then
																									v146 = 1;
																									break;
																								end
																							end
																							break;
																						end
																					end
																				end
																				if (((951 + 483) < (1118 + 1988)) and (v146 == 1)) then
																					for v288 = v147 + (338 - (10 + 327)), v81 do
																						v7(v148, v91[v288]);
																					end
																					break;
																				end
																			end
																			break;
																		end
																	end
																	break;
																end
															end
														elseif (((548 + 238) < (3361 - ((1844 - (1165 + 561)) + 220))) and (v94 > (3 + 1 + 3))) then
															v91[v93[451 - (108 + 341)]] = v61[v93[2 + 1]];
														else
															v91[v93[8 - 6]] = v29(v86[v93[1496 - (711 + 782)]], nil, v62);
														end
													elseif ((v94 <= (22 - 10)) or (((9015 - 6104) - (270 + 199)) < (24 + 50))) then
														if (((6354 - (580 + 1239)) == (13481 - 8946)) and (v94 <= 10)) then
															if ((v94 > (9 + 0)) or ((109 + 2900) <= (917 + 1188))) then
																local v149 = 0 - 0;
																local v150;
																local v151;
																local v152;
																local v153;
																local v154;
																while true do
																	if (((1137 + 693) < (4836 - (645 + 522))) and (v149 == (0 + 0))) then
																		local v222 = (2269 - (341 + 138)) - (273 + 737 + (1609 - 829));
																		while true do
																			if ((v222 == 1) or (((1756 - (89 + 237)) + 0) >= (17207 - 13595))) then
																				v149 = 2 - 1;
																				break;
																			end
																			if (((4519 - (1045 + 791)) >= 2460) and (v222 == ((0 - 0) - 0))) then
																				v150 = 0;
																				v151 = nil;
																				v222 = 1 - (0 - 0);
																			end
																		end
																	end
																	if ((v149 == (506 - (351 + 154))) or ((3378 - (1281 + 293)) >= 3275)) then
																		v152 = nil;
																		v153 = nil;
																		v149 = 268 - (28 + 238);
																	end
																	if ((v149 == 2) or ((3166 - 1749) > 3629)) then
																		v154 = nil;
																		while true do
																			if (((6354 - (1381 + 178)) > (378 + 24)) and (v150 == 2)) then
																				for v263 = v151, v81 do
																					local v264 = (881 - (581 + 300)) + 0;
																					local v265;
																					while true do
																						if (((2054 + 2759) > 3565) and (v264 == 0)) then
																							v265 = 0 - (1220 - (855 + 365));
																							while true do
																								if (((2027 + 1885) == (4382 - ((904 - 523) + 89))) and (v265 == (0 + 0))) then
																									v154 = v154 + 1 + 0 + 0;
																									v91[v263] = v152[v154];
																									break;
																								end
																							end
																							break;
																						end
																					end
																				end
																				break;
																			end
																			if (((4832 - (3246 - (1030 + 205))) <= ((5615 + 365) - (1074 + 82))) and (v150 == (0 - 0))) then
																				local v244 = 1784 - (214 + 1570);
																				while true do
																					if (((3193 - (990 + 465)) <= (905 + 1290)) and (v244 == (0 + 0))) then
																						v151 = v93[2 + 0];
																						v152, v153 = v88(v91[v151](v13(v91, v151 + (3 - (2 + 0)), v93[1729 - (1668 + 58)])));
																						v244 = 627 - (512 + 114);
																					end
																					if (((106 - 65) <= (6239 - 3221)) and ((3 - (288 - (156 + 130))) == v244)) then
																						v150 = (2 - 1) + 0;
																						break;
																					end
																				end
																			end
																			if ((2145 <= (769 + 3335)) and (v150 == 1)) then
																				local v245 = 0 + 0;
																				local v246;
																				while true do
																					if (((9069 - 6380) < (6839 - (109 + 1885))) and (0 == v245)) then
																						v246 = (2475 - 1006) - (1269 + 200);
																						while true do
																							if ((v246 == ((0 - 0) - 0)) or ((3137 - (98 + 717)) > 2622)) then
																								local v306 = 826 - (802 + 7 + 17);
																								while true do
																									if ((v306 == 1) or (4534 == (1215 + 867))) then
																										v246 = 1 - 0;
																										break;
																									end
																									if ((v306 == (0 - 0)) or (1571 > (276 + 1591))) then
																										v81 = (v153 + v151) - (1 + (69 - (10 + 59)));
																										v154 = 0 + 0;
																										v306 = 1 + 0;
																									end
																								end
																							end
																							if ((v246 == (2 - 1)) or ((8850 - 6196) >= (1072 + 1924))) then
																								v150 = 1 + 1;
																								break;
																							end
																						end
																						break;
																					end
																				end
																			end
																		end
																		break;
																	end
																end
															else
																v91[v93[2 + 0 + 0]]();
															end
														elseif (((2893 + (5343 - 4258)) > (983 + 1121)) and (v94 > (1444 - (797 + 636)))) then
															local v155 = 0;
															local v156;
															local v157;
															local v158;
															local v159;
															while true do
																if (((14541 - 11546) > (3160 - (1427 + 192))) and (v155 == (1 + (1164 - (671 + 492))))) then
																	for v229 = v156, v81 do
																		local v230 = (0 + 0) - 0;
																		local v231;
																		while true do
																			if (((2921 + (1543 - (369 + 846))) > (432 + 521)) and (v230 == (326 - (192 + 134)))) then
																				v231 = 1276 - (316 + 960);
																				while true do
																					if ((v231 == 0) or (3273 > (2545 + 2028))) then
																						v159 = v159 + 1 + 0;
																						v91[v229] = v157[v159];
																						break;
																					end
																				end
																				break;
																			end
																		end
																	end
																	break;
																end
																if ((v155 == (1 + 0)) or ((12046 - 8895) < (1835 - (22 + 61 + 468)))) then
																	v81 = (v158 + v156) - (1807 - (1202 + 604));
																	v159 = (0 + 0) - 0;
																	v155 = 2 - 0;
																end
																if (((0 - 0) == v155) or ((2175 - ((1990 - (1036 + 909)) + 280)) == (1216 + 313))) then
																	local v223 = 0 + 0;
																	while true do
																		if (((718 + 103) < (776 + 1347)) and (((1 - 0) + 0) == v223)) then
																			v155 = 1 + 0;
																			break;
																		end
																		if (((1669 - (970 - (11 + 192))) < 2325) and ((1911 - (340 + 1571)) == v223)) then
																			v156 = v93[2];
																			v157, v158 = v88(v91[v156]());
																			v223 = 1 + 0 + 0;
																		end
																	end
																end
															end
														elseif (((2630 - (1733 + 39)) <= (8139 - 5177)) and (v91[v93[(1211 - (135 + 40)) - (125 + 909)]] ~= v93[1952 - (1096 + 852)])) then
															v80 = v80 + 1 + 0;
														else
															v80 = v93[(6 - 3) - 0];
														end
													elseif ((v94 <= (14 + 0)) or ((4458 - (409 + 103)) < (777 + 511))) then
														if ((v94 == (249 - (46 + 190))) or (3242 == (662 - (51 + 44)))) then
															local v160 = 0 + 0;
															local v161;
															local v162;
															local v163;
															local v164;
															local v165;
															while true do
																if ((v160 == ((2901 - 1584) - (1114 + 203))) or ((1573 - (228 + 498)) >= (274 + 989))) then
																	v161 = 0 + 0;
																	v162 = nil;
																	v160 = 664 - (174 + 489);
																end
																if ((v160 == (2 - 1)) or ((4158 - (830 + 1075)) == (2375 - (303 + 221)))) then
																	v163 = nil;
																	v164 = nil;
																	v160 = 1271 - (231 + 1038);
																end
																if ((v160 == (2 + (0 - 0))) or ((3249 - ((347 - (50 + 126)) + 991)) > (9775 - 7403))) then
																	v165 = nil;
																	while true do
																		if ((v161 == (5 - (8 - 5))) or ((11092 - (1472 + 5175)) < (3321 + 828))) then
																			while true do
																				if ((v162 == ((1413 - (1233 + 180)) - 0)) or ((5244 - 3426) == 85)) then
																					local v279 = 0 - 0;
																					local v280;
																					while true do
																						if (((1947 - 1317) < (3375 - (111 + (2106 - (522 + 447))))) and (v279 == ((1579 - (107 + 1314)) - (91 + 67)))) then
																							v280 = 0 - 0;
																							while true do
																								if ((v280 == 0) or ((484 + 1454) == (3037 - (423 + 100)))) then
																									v163 = v86[v93[1 + 2]];
																									v164 = nil;
																									v280 = 2 - 1;
																								end
																								if (((1030 + 1188 + 2037) >= (826 - (326 + 445))) and (v280 == ((11 - 7) - 3))) then
																									v162 = 1;
																									break;
																								end
																							end
																							break;
																						end
																					end
																				end
																				if ((2999 > (2574 - 1418)) and (v162 == 1)) then
																					local v281 = 0;
																					local v282;
																					while true do
																						if (((5485 - 3135) > ((793 + 1073) - (530 + 181))) and ((881 - ((1218 - 604) + 267)) == v281)) then
																							v282 = 32 - (19 + 13);
																							while true do
																								if (((15941 - 11912) <= 4853) and (v282 == (0 - 0))) then
																									local v324 = 0;
																									while true do
																										if ((v324 == (2 - 1)) or ((1473 - 957) > (892 + 2542))) then
																											v282 = 1;
																											break;
																										end
																										if (((7115 - 3069) >= (6289 - 3256)) and (v324 == 0)) then
																											v165 = {};
																											v164 = v10({}, {__index=function(v340, v341)
																												local v342 = 1812 - (1293 + 519);
																												local v343;
																												local v344;
																												while true do
																													if (((0 - 0) == v342) or ((7098 - (6289 - (716 + 1194))) <= ((48 + 2718) - 1319))) then
																														v343 = (0 + 0) - 0;
																														v344 = nil;
																														v342 = 504 - (74 + 429);
																													end
																													if ((v342 == ((3 - 1) - 1)) or (4134 < (2080 + 1846))) then
																														while true do
																															if ((0 == v343) or ((34 + 130) >= (6470 - 3685))) then
																																local v366 = 0;
																																while true do
																																	if ((v366 == (0 + 0)) or ((175 + 174 + 176) == (1318 + 791))) then
																																		v344 = v165[v341];
																																		return v344[1097 - (709 + 387)][v344[1860 - (673 + 1185)]];
																																	end
																																end
																															end
																														end
																														break;
																													end
																												end
																											end,__newindex=function(v345, v346, v347)
																												local v348 = 0 - 0;
																												local v349;
																												local v350;
																												while true do
																													if (((105 - 72) == 33) and (v348 == (1 - 0))) then
																														while true do
																															if ((3054 <= (2872 + 1143)) and (v349 == (0 + 0))) then
																																v350 = v165[v346];
																																v350[(2 - 1) - 0][v350[2]] = v347;
																																break;
																															end
																														end
																														break;
																													end
																													if (((460 + 1411) < (6742 - (2378 + 982))) and ((0 - 0) == v348)) then
																														v349 = 1880 - (446 + 1434);
																														v350 = nil;
																														v348 = 1284 - (1040 + 243);
																													end
																												end
																											end});
																											v324 = 2 - 1;
																										end
																									end
																								end
																								if (((3140 - (559 + 1288)) <= (4097 - (609 + 1322))) and (v282 == (455 - (13 + 441)))) then
																									v162 = 5 - 3;
																									break;
																								end
																							end
																							break;
																						end
																					end
																				end
																				if ((v162 == (7 - 5)) or (2579 < (322 - 199))) then
																					for v291 = 1, v93[19 - 15] do
																						local v292 = 0;
																						local v293;
																						local v294;
																						while true do
																							if ((v292 == 0) or ((32 + 814) >= (8600 - 6232))) then
																								local v309 = 0 + 0;
																								while true do
																									if (((0 + 0) == v309) or ((11905 - 7893) <= (1838 + 1520))) then
																										v293 = 0 - 0;
																										v294 = nil;
																										v309 = 1 + 0;
																									end
																									if ((1494 <= (1672 + 1333)) and (v309 == (1 + 0))) then
																										v292 = 1 + 0;
																										break;
																									end
																								end
																							end
																							if ((v292 == (1 + (0 - 0))) or (3111 == (2567 - (153 + 280)))) then
																								while true do
																									if (((6800 - 4445) == (2115 + 240)) and (v293 == (0 + 0))) then
																										local v330 = 0 + 0;
																										local v331;
																										while true do
																											if ((v330 == (0 + 0)) or (((860 - (279 + 154)) + (939 - (454 + 324))) <= (657 - 225))) then
																												v331 = 0 + 0;
																												while true do
																													if (((5464 - (71 + 18 + 578)) >= ((2800 - (12 + 5)) + 1112)) and ((0 - 0) == v331)) then
																														v80 = v80 + 1;
																														v294 = v85[v80];
																														v331 = (567 + 483) - (572 + 477);
																													end
																													if (((483 + 3094) == 3577) and (v331 == 1)) then
																														v293 = 1 + 0;
																														break;
																													end
																												end
																												break;
																											end
																										end
																									end
																									if (((453 + 3341) > (3779 - (84 + 2))) and (v293 == (1 - 0))) then
																										if ((v294[1 + 0] == (844 - (497 + 345))) or ((33 + 1242) == (694 + 3406))) then
																											v165[v291 - (1334 - (605 + 728))] = {v91,v294[3 + 0]};
																										else
																											v165[v291 - (1 - 0)] = {v61,v294[3]};
																										end
																										v90[#v90 + 1] = v165;
																										break;
																									end
																								end
																								break;
																							end
																						end
																					end
																					v91[v93[7 - 5]] = v29(v163, v164, v62);
																					break;
																				end
																			end
																			break;
																		end
																		if ((v161 == (1 + 0)) or (1591 >= ((25271 - 15353) - 6338))) then
																			v164 = nil;
																			v165 = nil;
																			v161 = 2 + 0;
																		end
																		if (((1472 - (457 + 32)) <= (768 + 1040)) and (v161 == (1402 - (832 + 570)))) then
																			local v248 = 0 + 0;
																			while true do
																				if (((1 + 0) == v248) or (((1654 - (277 + 816)) + 1589) <= (4235 - 3038))) then
																					v161 = 1 + 0;
																					break;
																				end
																				if ((3769 >= (1969 - (588 + 208))) and (v248 == 0)) then
																					v162 = 0 - 0;
																					v163 = nil;
																					v248 = 1801 - (884 + 916);
																				end
																			end
																		end
																	end
																	break;
																end
															end
														else
															v91[v93[3 - (4 - 3)]] = v91[v93[2 + 1]][v93[4]];
														end
													elseif ((1485 == (2138 - (232 + 421))) and (v94 <= (1904 - (1569 + 320)))) then
														local v168 = 0 + (1183 - (1058 + 125));
														local v169;
														local v170;
														while true do
															if ((v168 == (1 + 0)) or ((11170 - 7855) <= 2782)) then
																while true do
																	if (((605 - (316 + 289)) == v169) or ((2293 - 1417) >= (137 + 2827))) then
																		v170 = v93[1455 - (666 + 787)];
																		v91[v170] = v91[v170](v13(v91, v170 + (426 - (360 + 65)), v93[3 + 0]));
																		break;
																	end
																end
																break;
															end
															if ((v168 == (254 - (79 + 175))) or ((3519 - 1287) > (1949 + 103 + 445))) then
																v169 = 0 - 0;
																v170 = nil;
																v168 = 1 - 0;
															end
														end
													elseif ((v94 == 16) or ((3009 - (503 + 396)) <= (1307 - (815 + 160)))) then
														for v224 = v93[183 - (92 + 89)], v93[3] do
															v91[v224] = nil;
														end
													else
														local v215 = 0 - 0;
														local v216;
														local v217;
														while true do
															if ((3686 > (1627 + 1545)) and ((0 + 0) == v215)) then
																v216 = v93[2];
																v217 = v91[v93[(47 - 36) - 8]];
																v215 = 1 + 0;
															end
															if ((v215 == (2 - 1)) or (4474 < (1946 - 1126))) then
																v91[v216 + 1 + 0] = v217;
																v91[v216] = v217[v93[2 + 2]];
																break;
															end
														end
													end
												elseif (((13032 - 8753) >= 2882) and (v94 <= (4 + 22))) then
													if ((v94 <= (31 - 10)) or (2029 >= (4765 - (485 + 759)))) then
														if ((v94 <= (43 - 24)) or ((3226 - (442 + 179 + 568)) >= (5777 - ((2432 - 1600) + 303)))) then
															if (((2666 - (88 + 858)) < (1359 + 3099)) and (v94 > (15 + 3))) then
																v91[v93[1 + 1]][v93[(2690 - (41 + 1857)) - ((2659 - (1222 + 671)) + 23)]] = v93[19 - 15];
															else
																local v173 = 0 - 0;
																local v174;
																local v175;
																while true do
																	if ((v173 == 0) or ((1148 - 712) > 3021)) then
																		v174 = 0 - 0;
																		v175 = nil;
																		v173 = 1074 - (1036 + 37);
																	end
																	if (((506 + 207) <= 847) and (v173 == 1)) then
																		while true do
																			if (((4194 - 2040) <= (3171 + 860)) and (v174 == (1480 - (641 + 839)))) then
																				v175 = v93[915 - (910 + 3)];
																				v91[v175] = v91[v175](v13(v91, v175 + (2 - 1), v81));
																				break;
																			end
																		end
																		break;
																	end
																end
															end
														elseif (((6299 - ((3788 - 2322) + 218)) == (2121 + (3584 - 1090))) and (v94 > (1168 - (556 + 592)))) then
															local v176 = 0 + 0;
															local v177;
															local v178;
															while true do
																if (((809 - (329 + 479)) == v176) or ((4644 - (174 + 680)) == (1718 - 1218))) then
																	while true do
																		if (((1271 - (229 + 953)) < ((2231 - (1111 + 663)) - 236)) and (v177 == (0 + 0))) then
																			v178 = v93[741 - (396 + 343)];
																			v91[v178] = v91[v178](v91[v178 + 1 + 0]);
																			break;
																		end
																	end
																	break;
																end
																if (((3531 - (29 + 1448)) >= (2810 - (135 + 1254))) and (v176 == 0)) then
																	v177 = 1579 - (874 + 705);
																	v178 = nil;
																	v176 = 3 - 2;
																end
															end
														else
															local v179 = 0;
															local v180;
															local v181;
															local v182;
															while true do
																if (((3230 - 2538) < 3058) and (v179 == (1 + 0 + 0))) then
																	v182 = nil;
																	while true do
																		if ((v180 == (1528 - (389 + 777 + 361))) or ((3828 - (102 + 472)) == (1562 + 93))) then
																			for v266 = v181 + (1 - 0) + 0, v93[4 + 0] do
																				v182 = v182 .. v91[v266];
																			end
																			v91[v93[2]] = v182;
																			break;
																		end
																		if ((v180 == (1545 - (320 + 1225))) or ((2306 - 1010) == (3005 + 1905))) then
																			local v256 = 0;
																			while true do
																				if (((4832 - (157 + 1307)) == (5227 - (821 + 1038))) and (v256 == (0 - 0))) then
																					v181 = v93[1 + 2];
																					v182 = v91[v181];
																					v256 = 1 - 0;
																				end
																				if ((2643 < (1420 + 2395)) and (v256 == 1)) then
																					v180 = 2 - 1;
																					break;
																				end
																			end
																		end
																	end
																	break;
																end
																if (((2939 - (834 + 192)) > (32 + 461)) and ((0 + 0) == v179)) then
																	v180 = 0 + 0;
																	v181 = nil;
																	v179 = 1 + 0;
																end
															end
														end
													elseif (((7366 - 2611) > (3732 - (300 + 4))) and (v94 <= (7 + 16))) then
														if (((3615 - 2234) <= (3048 - (642 + 37))) and (v94 > 22)) then
															local v183 = 0;
															local v184;
															while true do
																if ((v183 == (362 - (112 + 250))) or (4843 == (1629 + 2455))) then
																	v184 = v93[(1 + 3) - 2];
																	do
																		return v91[v184](v13(v91, v184 + 1 + 0 + 0, v81));
																	end
																	break;
																end
															end
														else
															v91[v93[2 + 0]] = {};
														end
													elseif ((((8767 - 5275) + 1177) > (180 + 183)) and (v94 <= (18 + 6))) then
														local v186 = 1414 - ((1455 - (233 + 221)) + 413);
														local v187;
														local v188;
														while true do
															if ((v186 == 0) or (1877 >= (6997 - 3859))) then
																v187 = 882 - ((563 - 319) + 638);
																v188 = nil;
																v186 = 694 - (627 + 66);
															end
															if ((4742 >= 3626) and (v186 == (2 - 1))) then
																while true do
																	if (((603 - (451 + 61 + 90)) == v187) or (4540 == 916)) then
																		for v267 = v188, v81 do
																			local v268 = 1906 - (1665 + 241);
																			local v269;
																			local v270;
																			while true do
																				if ((v268 == 1) or (1156 > (5062 - (373 + 344)))) then
																					while true do
																						if (((1009 + 1228) < 4249) and ((0 + 0) == v269)) then
																							v270 = v89[v267 - v188];
																							v91[v267] = v270;
																							break;
																						end
																					end
																					break;
																				end
																				if ((v268 == (0 - (1541 - (718 + 823)))) or (((2857 + 1682) - 1856) < 23)) then
																					local v295 = 0;
																					while true do
																						if ((((2601 - (266 + 539)) - (35 + 1064)) <= (601 + 225)) and (v295 == 1)) then
																							v268 = 2 - 1;
																							break;
																						end
																						if (((5 + 1100) <= (2412 - (298 + 938))) and (v295 == 0)) then
																							v269 = 1259 - (233 + 1026);
																							v270 = nil;
																							v295 = (4719 - 3052) - (636 + (2255 - (636 + 589)));
																						end
																					end
																				end
																			end
																		end
																		break;
																	end
																	if (((1728 + 1651) <= (3724 + 88)) and ((0 + (0 - 0)) == v187)) then
																		local v257 = 0 + 0;
																		while true do
																			if ((v257 == ((455 - 234) - (55 + 132 + 34))) or ((153 + 635) >= (163 + 1453))) then
																				v188 = v93[7 - 5];
																				v81 = (v188 + v92) - (298 - (36 + 261));
																				v257 = 1 - 0;
																			end
																			if (((3222 - (34 + 1334)) <= (1299 + 2080)) and (v257 == 1)) then
																				v187 = 1 + 0;
																				break;
																			end
																		end
																	end
																end
																break;
															end
														end
													elseif (((5832 - (1035 + 248)) == (4570 - (8 + 12 + 1))) and (v94 > 25)) then
														if ((v91[v93[2 + 0]] == v93[323 - (134 + 185)]) or ((4037 - (657 + 358)) >= (4157 - ((1453 - 904) + 584)))) then
															v80 = v80 + ((1562 - 876) - (314 + 371));
														else
															v80 = v93[10 - 7];
														end
													elseif (((5788 - (478 + (1677 - (1151 + 36)))) > (1165 + 1033)) and v91[v93[1174 - (786 + 386)]]) then
														v80 = v80 + (3 - 2);
													else
														v80 = v93[3];
													end
												elseif ((v94 <= (1409 - (1055 + 324))) or ((2401 - (1093 + 247)) >= (4198 + 149 + 544))) then
													if (((144 + 1220) <= (17758 - 13285)) and (v94 <= (94 - 66))) then
														if ((v94 == 27) or (3595 <= 3)) then
															do
																return;
															end
														else
															local v189 = 0;
															local v190;
															local v191;
															local v192;
															local v193;
															local v194;
															while true do
																if ((v189 == (0 - 0)) or (4672 == (9679 - 5827))) then
																	v190 = 0 + 0 + 0;
																	v191 = nil;
																	v189 = 3 - 2;
																end
																if ((1559 == (5373 - 3814)) and (v189 == (1 + 0))) then
																	v192 = nil;
																	v193 = nil;
																	v189 = 4 - 2;
																end
																if ((v189 == ((2060 - 1370) - (364 + 324))) or ((4802 - 3050) <= (1890 - 1102))) then
																	v194 = nil;
																	while true do
																		if ((v190 == (1 + 1)) or ((16348 - 12441) == (282 - 105))) then
																			for v271 = v191, v81 do
																				local v272 = 0;
																				local v273;
																				while true do
																					if (((10538 - 7068) > (1823 - (1249 + 19))) and (v272 == (0 + 0))) then
																						v273 = 0 - 0;
																						while true do
																							if ((v273 == (1086 - (686 + 400))) or ((763 + 209) == (874 - (73 + 156)))) then
																								v194 = v194 + 1;
																								v91[v271] = v192[v194];
																								break;
																							end
																						end
																						break;
																					end
																				end
																			end
																			break;
																		end
																		if (((16 + 3166) >= (2926 - (721 + 90))) and (v190 == (1 + 0))) then
																			local v258 = 0 - 0;
																			while true do
																				if (((4363 - (224 + (2078 - (1552 + 280)))) < (7174 - 2745)) and (v258 == (1 - 0))) then
																					v190 = 1 + 1;
																					break;
																				end
																				if ((v258 == (0 + 0)) or ((2106 + 761) < 1905)) then
																					v81 = (v193 + v191) - (1 - (834 - (64 + 770)));
																					v194 = 0;
																					v258 = 3 - 2;
																				end
																			end
																		end
																		if ((v190 == (513 - (203 + 310))) or ((3789 - (1238 + 755)) >= 4051)) then
																			v191 = v93[1 + 1];
																			v192, v193 = v88(v91[v191](v91[v191 + ((1043 + 492) - (709 + 825))]));
																			v190 = (2 - 1) - 0;
																		end
																	end
																	break;
																end
															end
														end
													elseif (((2357 - 738) <= ((821 + 3799) - (196 + (1911 - (157 + 1086))))) and (v94 > (114 - 85))) then
														v91[v93[2]] = v93[5 - 2];
													else
														local v197 = 833 - ((341 - 170) + 662);
														local v198;
														while true do
															if (((697 - (4 + 89)) == (2116 - 1512)) and (v197 == ((0 - 0) + 0))) then
																v198 = v91[v93[(25 - 8) - 13]];
																if (not v198 or ((1759 + 2725) == (2386 - (35 + 1451)))) then
																	v80 = v80 + (1 - 0);
																else
																	local v240 = 0;
																	local v241;
																	while true do
																		if ((v240 == (1453 - (28 + 1425))) or ((6452 - (941 + 1052)) <= (1068 + 45))) then
																			v241 = 1514 - ((1641 - (599 + 220)) + 692);
																			while true do
																				if (((5184 - 1552) > (1601 + 1797)) and (v241 == (297 - (45 + 252)))) then
																					v91[v93[2 + 0]] = v198;
																					v80 = v93[2 + 1];
																					break;
																				end
																			end
																			break;
																		end
																	end
																end
																break;
															end
														end
													end
												elseif (((9934 - 5852) <= (5350 - (114 + 319))) and (v94 <= ((89 - 44) - 13))) then
													if (((6191 - 1359) >= (884 + (2433 - (1813 + 118)))) and (v94 > (45 - 14))) then
														local v199 = 0;
														local v200;
														while true do
															if ((137 == (286 - 149)) and (v199 == (0 + 0))) then
																v200 = v93[1965 - (556 + 1407)];
																v91[v200](v13(v91, v200 + (1207 - ((1958 - (841 + 376)) + 465)), v93[468 - (170 + 295)]));
																break;
															end
														end
													else
														v91[v93[2 + 0]][v93[(3 - 0) + 0]] = v91[v93[4]];
													end
												elseif ((v94 <= ((19 + 61) - 47)) or (((3553 - 2251) + 268) >= (2779 + 1553))) then
													v80 = v93[2 + (860 - (464 + 395))];
												elseif ((v94 > (1264 - (957 + 273))) or ((1087 + 2977) <= (729 + (2797 - 1707)))) then
													if ((v93[2] == v91[v93[15 - 11]]) or ((13139 - (3916 + 4237)) < (4807 - 3233))) then
														v80 = v80 + ((841 - (467 + 370)) - 3);
													else
														v80 = v93[1783 - (389 + 1391)];
													end
												else
													local v218 = 0 + 0;
													local v219;
													local v220;
													while true do
														if (((461 + 3965) > (391 - 219)) and ((951 - (783 + 168)) == v218)) then
															v219 = v93[2];
															v220 = {};
															v218 = 3 - 2;
														end
														if (((577 + 9) > (766 - (309 + 2))) and (v218 == ((3 - 1) - 1))) then
															for v260 = 1213 - (1090 + 122), #v90 do
																local v261 = 0 + 0;
																local v262;
																while true do
																	if (((2773 - 1947) == 826) and (v261 == 0)) then
																		v262 = v90[v260];
																		for v296 = 0 + 0 + 0, #v262 do
																			local v297 = 1118 - (628 + 490);
																			local v298;
																			local v299;
																			local v300;
																			while true do
																				if ((v297 == (0 + 0)) or ((9950 - 5931) > (20295 - 15854))) then
																					v298 = v262[v296];
																					v299 = v298[775 - (431 + 343)];
																					v297 = 1 - 0;
																				end
																				if ((2017 < (12326 - 8065)) and (v297 == (1 + (0 - 0)))) then
																					v300 = v298[2];
																					if (((604 + 4112) > (1775 - (556 + 1139))) and (v299 == v91) and (v300 >= v219)) then
																						local v325 = 15 - (6 + 9);
																						local v326;
																						local v327;
																						while true do
																							if ((v325 == (0 + 0)) or (3507 == (1677 + 1595))) then
																								v326 = 169 - (28 + 141);
																								v327 = nil;
																								v325 = 1 + 0;
																							end
																							if ((v325 == 1) or (876 >= (3795 - 720))) then
																								while true do
																									if ((4352 > (1809 + 745)) and (v326 == (1317 - (76 + 410 + 831)))) then
																										v327 = 0 - 0;
																										while true do
																											if ((((0 - 0) - 0) == v327) or ((833 + 3573) < (12783 - 8740))) then
																												v220[v300] = v299[v300];
																												v298[1264 - (668 + 595)] = v220;
																												break;
																											end
																										end
																										break;
																									end
																								end
																								break;
																							end
																						end
																					end
																					break;
																				end
																			end
																		end
																		break;
																	end
																end
															end
															break;
														end
													end
												end
												v80 = v80 + 1 + (520 - (150 + 370));
												break;
											end
										end
										break;
									end
								end
							end
						end
						A, B = v27(v11(v84));
						if not A[1] then
							local v98 = 0;
							local v99;
							while true do
								if (v98 == 0) then
									v99 = v60[4][v80] or "?";
									error("Script error at [" .. v99 .. "]:" .. A[2]);
									break;
								end
							end
						else
							return v13(A, 2, B);
						end
					end;
				end
				if (v63 == 0) then
					v64 = v60[1];
					v65 = v60[2];
					v63 = 1;
				end
			end
		end
		return v29(v28(), {}, v17)(...);
	end
	vv9(), ...);
end
